---
# tasks file for library_application

- name: Ensure that the required applications are installed
  ansible.builtin.apt:
    pkg:
    - postgresql-all
    - nginx

- name: Configure PostgreSQL
  ansible.builtin.debug:
    msg: To be Implemented

- name: Install npm
  ansible.builtin.debug:
    msg: To be Implemented

- name: Install the backend application
  ansible.builtin.debug:
    msg: "To be Implemented in {{ backend_application_dir }}"

- name: Install the frontend application
  ansible.builtin.debug:
    msg: "To be Implemented in {{ frontend_application_dir }}"

- name: Install certbot
  ansible.builtin.debug:
    msg: To be Implemented

- name: Configure certbot
  ansible.builtin.debug:
    msg: To be implemented

- name: "Start and enable certbot's timer and service"
  ansible.builtin.debug:
    msg: To be Implemented

- name: Configure Nginx
  ansible.builtin.debug:
    msg: To be Implemented
  register: nginx_configuration_output

- name: "{{ nginx_templated_name }}"
  ansible.builtin.debug:
    msg: To be implemented
  vars:
    nginx_templated_name:  "Ensure that Nginx is enabled and {% if nginx_configuration_output.changed %}re-started as its configuration has changed{% else %}started{% endif %}."

- name: Ensure that the unit files for the application exist
  ansible.builtin.debug:
    msg: "{{ unit_file }}"
  register: unit_files_output
  loop_control:
    loop_var: unit_file
  loop:
    - backend.service
    - frontend.service
    - library.service
    - certbot-renewal.service
    - certbot-renewal.timer

- name: "{{ service_state_templated_name }}"
  ansible.builtin.debug:
    msg: "{{ unit_file }}"
  loop_control:
    loop_var: unit_file
  loop:
    - backend.service
    - frontend.service
    - library.service
  vars:
    service_state_templated_name: "Ensure that the unit files are enabled and {% if unit_files_output.changed %}re-started as they were changed{% else %}started{% endif %}"
...
